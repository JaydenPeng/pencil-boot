<configuration>
    <!-- 直接本配置文件配置，name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义后，可以使“${}”来使用变量。java.io.tmpdir的值从虚拟机参数中获取：-Djava.io.tmpdir -->
    <property name="LOG_PATH"
              value="${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}"/>
    
    <!-- properties配置文件定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径。source配置文件内参数key -->
    <springProperty scope="context" name="APP_NAME"
                    source="spring.application.name" defaultValue="pencil-boot"/>

    <!-- %d{yyyy-MM-dd HH:mm:ss.SSS}——日志输出时间; $PID——进程号; %level——日志级别; ${LOG_LEVEL_PATTERN:-%5p}：用于呈现日志级别的格式（默认%5p）；%t--输出日志的线程名；%-40.40logger{39}——其中的“-”表示左对齐，“{39}”表示logger名字最长39个字符，否则按照句点分割; %msg——日志消息; %n——平台的换行符; -->
    <property name="LOG_PATTERN"
              value="[%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}] %X{trace_id:-}%X{IP}%X{userid}[${PID:- }] [%level] [%thread]%t %-40.40logger{39}: %msg%n"/>
 
    <!-- 标准输出模式 console-->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 对日志进行格式化 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>
 
    <!-- 输出模式 file,滚动记录文件，先将日志文件指定到文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="fileInfo" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
        <file>${LOG_PATH}/${APP_NAME}.log</file>
        <!--滚动策略  基于时间的分包策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- yyyy-MM-dd-HH 时间策略则为一小时一个文件 -->
            <FileNamePattern>${LOG_PATH}/${APP_NAME}-info.%d{yyyy-MM-dd-HH}.%i.log</FileNamePattern>
            <!--日志文件保留小时数-->
            <MaxHistory>48</MaxHistory>
            <!--单个日志文件最大1GB-->
            <maxFileSize>1GB</maxFileSize>
            <!--日志文件总大小超过20GB会删除旧的日志文件-->
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <!--  layout 负责把事件转换成字符串，格式化的日志信息的输出 -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${LOG_PATTERN}</pattern>
        </layout>
    </appender>
 
    <appender name="fileError" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${APP_NAME}-error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- yyyy-MM-dd-HH 时间策略则为一小时一个文件 -->
            <FileNamePattern>${LOG_PATH}/${APP_NAME}-error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!--日志文件保留小时数-->
            <MaxHistory>48</MaxHistory>
            <maxFileSize>1GB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${LOG_PATTERN}</pattern>
        </layout>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
 
    <appender name="fileSQL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${APP_NAME}-sql.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- yyyy-MM-dd-HH 时间策略则为一小时一个文件 -->
            <FileNamePattern>${LOG_PATH}/${APP_NAME}-sql.%d{yyyy-MM-dd-HH}.%i.log</FileNamePattern>
            <MaxHistory>48</MaxHistory>
            <maxFileSize>1GB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${LOG_PATTERN}</pattern>
        </layout>
    </appender>

    <!--
            <logger>用来设置某一个包或者具体的某一个类的日志打印级别、 以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
            name:用来指定受此logger约束的某一个包或者具体的某一个类。
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。
            addtivity:是否向上级logger传递打印信息。默认是true。
    -->
    <logger name="springfox.documentation" level="OFF"/>
 
    <!-- springProfile多环境日志输出，根据不同环境（local:本地环境，prod:生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出，读取spring.profiles.active的值-->
    <springProfile name="local">
        <root>
            <level value="INFO"/>
            <appender-ref ref="stdout"/>
            <appender-ref ref="fileInfo"/>
            <appender-ref ref="fileError"/>
        </root>
    </springProfile>

</configuration>